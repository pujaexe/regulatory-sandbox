// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mazsTSCdeXMvNewzsED8CP
// Component: 5Buw-2ZEH6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_sandbox_satuhsehat.module.css"; // plasmic-import: mazsTSCdeXMvNewzsED8CP/projectcss
import sty from "./PlasmicItemListMitraThumbnail.module.css"; // plasmic-import: 5Buw-2ZEH6/css

export type PlasmicItemListMitraThumbnail__VariantMembers = {
  isTerdaftar: "isTerdaftar";
};
export type PlasmicItemListMitraThumbnail__VariantsArgs = {
  isTerdaftar?: SingleBooleanChoiceArg<"isTerdaftar">;
};
type VariantPropType = keyof PlasmicItemListMitraThumbnail__VariantsArgs;
export const PlasmicItemListMitraThumbnail__VariantProps =
  new Array<VariantPropType>("isTerdaftar");

export type PlasmicItemListMitraThumbnail__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicItemListMitraThumbnail__ArgsType;
export const PlasmicItemListMitraThumbnail__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicItemListMitraThumbnail__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  h5?: p.Flex<"h5">;
};

export interface DefaultItemListMitraThumbnailProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  isTerdaftar?: SingleBooleanChoiceArg<"isTerdaftar">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemListMitraThumbnail__RenderFunc(props: {
  variants: PlasmicItemListMitraThumbnail__VariantsArgs;
  args: PlasmicItemListMitraThumbnail__ArgsType;
  overrides: PlasmicItemListMitraThumbnail__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isTerdaftar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isTerdaftar
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootisTerdaftar]: hasVariant(
              $state,
              "isTerdaftar",
              "isTerdaftar"
            )
          }
        )}
      >
        {(hasVariant($state, "isTerdaftar", "isTerdaftar") ? true : true) ? (
          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.link, {
              [sty.linkisTerdaftar]: hasVariant(
                $state,
                "isTerdaftar",
                "isTerdaftar"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__x2KvD)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/sandbox_satuhsehat/images/menuIconspng.png",
                    fullWidth: 70,
                    fullHeight: 70,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot
            })}
            <h5
              data-plasmic-name={"h5"}
              data-plasmic-override={overrides.h5}
              className={classNames(projectcss.all, projectcss.h5, sty.h5)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "PeriksaDulu",
                value: args.children
              })}
            </h5>
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "h5"],
  link: ["link", "h5"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItemListMitraThumbnail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItemListMitraThumbnail__VariantsArgs;
    args?: PlasmicItemListMitraThumbnail__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItemListMitraThumbnail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicItemListMitraThumbnail__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicItemListMitraThumbnail__ArgProps,
          internalVariantPropNames: PlasmicItemListMitraThumbnail__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemListMitraThumbnail__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemListMitraThumbnail";
  } else {
    func.displayName = `PlasmicItemListMitraThumbnail.${nodeName}`;
  }
  return func;
}

export const PlasmicItemListMitraThumbnail = Object.assign(
  // Top-level PlasmicItemListMitraThumbnail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicItemListMitraThumbnail
    internalVariantProps: PlasmicItemListMitraThumbnail__VariantProps,
    internalArgProps: PlasmicItemListMitraThumbnail__ArgProps
  }
);

export default PlasmicItemListMitraThumbnail;
/* prettier-ignore-end */
