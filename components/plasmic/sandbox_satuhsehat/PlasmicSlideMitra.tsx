// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mazsTSCdeXMvNewzsED8CP
// Component: HjExHmE43ji

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: Gt-Lz5BwtAt/component
import SliderMitra from "../../SliderMitra"; // plasmic-import: 2Eus14HlTe/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import ItemListMitraThumbnail from "../../ItemListMitraThumbnail"; // plasmic-import: 5Buw-2ZEH6/component

import { useScreenVariants as useScreenVariantsqbGzfD819Z3T3 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QBGzfD819Z3t3/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_sandbox_satuhsehat.module.css"; // plasmic-import: mazsTSCdeXMvNewzsED8CP/projectcss
import sty from "./PlasmicSlideMitra.module.css"; // plasmic-import: HjExHmE43ji/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 1I82Ralll34/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: m0QQT_49MIS/icon

export type PlasmicSlideMitra__VariantMembers = {
  isDiawasi: "isDiawasi";
};
export type PlasmicSlideMitra__VariantsArgs = {
  isDiawasi?: SingleBooleanChoiceArg<"isDiawasi">;
};
type VariantPropType = keyof PlasmicSlideMitra__VariantsArgs;
export const PlasmicSlideMitra__VariantProps = new Array<VariantPropType>(
  "isDiawasi"
);

export type PlasmicSlideMitra__ArgsType = {};
type ArgPropType = keyof PlasmicSlideMitra__ArgsType;
export const PlasmicSlideMitra__ArgProps = new Array<ArgPropType>();

export type PlasmicSlideMitra__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  buttonWrapper?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  sliderMitra?: p.Flex<typeof SliderMitra>;
  slider?: p.Flex<typeof Slider>;
};

export interface DefaultSlideMitraProps {
  isDiawasi?: SingleBooleanChoiceArg<"isDiawasi">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSlideMitra__RenderFunc(props: {
  variants: PlasmicSlideMitra__VariantsArgs;
  args: PlasmicSlideMitra__ArgsType;
  overrides: PlasmicSlideMitra__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isDiawasi",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDiawasi
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqbGzfD819Z3T3()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootisDiawasi]: hasVariant($state, "isDiawasi", "isDiawasi") }
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"buttonWrapper"}
            data-plasmic-override={overrides.buttonWrapper}
            hasGap={true}
            className={classNames(projectcss.all, sty.buttonWrapper)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__uBTvq, {
                [sty.buttonisDiawasi__uBTvqvK8Cy]: hasVariant(
                  $state,
                  "isDiawasi",
                  "isDiawasi"
                )
              })}
              color={
                hasVariant($state, "isDiawasi", "isDiawasi")
                  ? ("white" as const)
                  : ("softGreen" as const)
              }
              onClick={async event => {
                const $steps = {};
                $steps["updateIsDiawasi"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "wfa8TYLQn",
                            componentUuid: "HjExHmE43ji",
                            argName: "vgroup"
                          },
                          () => "isDiawasi"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "wfa8TYLQn",
                            componentUuid: "HjExHmE43ji",
                            argName: "operation"
                          },
                          () => 6
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "wfa8TYLQn",
                            componentUuid: "HjExHmE43ji",
                            argName: "value"
                          },
                          () => "isDiawasi"
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "wfa8TYLQn",
                          componentUuid: "HjExHmE43ji"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            p.set($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateIsDiawasi"] === "object" &&
                  typeof $steps["updateIsDiawasi"].then === "function"
                ) {
                  $steps["updateIsDiawasi"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "wfa8TYLQn",
                      componentUuid: "HjExHmE43ji"
                    },
                    $steps["updateIsDiawasi"]
                  );
                }
              }}
              shape={"rounded" as const}
              submitsForm={true}
            >
              {"Mitra Terdaftar"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__qNx4, {
                [sty.buttonisDiawasi__qNx4VK8Cy]: hasVariant(
                  $state,
                  "isDiawasi",
                  "isDiawasi"
                )
              })}
              color={
                hasVariant($state, "isDiawasi", "isDiawasi")
                  ? ("softGreen" as const)
                  : ("white" as const)
              }
              onClick={async event => {
                const $steps = {};
                $steps["updateIsDiawasi"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "WS9afxnTd",
                            componentUuid: "HjExHmE43ji",
                            argName: "vgroup"
                          },
                          () => "isDiawasi"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "WS9afxnTd",
                            componentUuid: "HjExHmE43ji",
                            argName: "operation"
                          },
                          () => 4
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "WS9afxnTd",
                          componentUuid: "HjExHmE43ji"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            p.set($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateIsDiawasi"] === "object" &&
                  typeof $steps["updateIsDiawasi"].then === "function"
                ) {
                  $steps["updateIsDiawasi"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "WS9afxnTd",
                      componentUuid: "HjExHmE43ji"
                    },
                    $steps["updateIsDiawasi"]
                  );
                }
              }}
              shape={"rounded" as const}
              submitsForm={true}
            >
              {"Mitra Diawasi"}
            </Button>
          </p.Stack>
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link, {
              [sty.linkisDiawasi]: hasVariant($state, "isDiawasi", "isDiawasi")
            })}
            component={Link}
            href={
              hasVariant($state, "isDiawasi", "isDiawasi")
                ? `/mitra-diawasi-1`
                : `/mitra-terdaftar-1`
            }
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dcamJ,
                {
                  [sty.textisDiawasi__dcamJvK8Cy]: hasVariant(
                    $state,
                    "isDiawasi",
                    "isDiawasi"
                  )
                }
              )}
            >
              {"Lihat Semua"}
            </div>
          </p.PlasmicLink>
        </div>
      ) : null}
      <SliderMitra
        data-plasmic-name={"sliderMitra"}
        data-plasmic-override={overrides.sliderMitra}
        className={classNames("__wab_instance", sty.sliderMitra, {
          [sty.sliderMitraisDiawasi]: hasVariant(
            $state,
            "isDiawasi",
            "isDiawasi"
          )
        })}
        slot={
          <Slider
            data-plasmic-name={"slider"}
            data-plasmic-override={overrides.slider}
            adaptiveHeight={
              hasVariant($state, "isDiawasi", "isDiawasi") ? true : true
            }
            className={classNames("__wab_instance", sty.slider, {
              [sty.sliderisDiawasi]: hasVariant(
                $state,
                "isDiawasi",
                "isDiawasi"
              )
            })}
            dots={true}
            infinite={
              hasVariant($state, "isDiawasi", "isDiawasi") ? false : false
            }
            rows={1 as const}
            slidesPerRow={1 as const}
            slidesToShow={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (1 as const)
                : (2.5 as const)
            }
          >
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__cM7Na,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__cM7NavK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__gilyS, {
                      [sty.imgisDiawasi__gilySvK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("72px" as const)
                    }
                    loading={"lazy" as const}
                    src={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? {
                            src: "/plasmic/sandbox_satuhsehat/images/rilivpng.png",
                            fullWidth: 4669,
                            fullHeight: 2363,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/sandbox_satuhsehat/images/menuIconspng.png",
                            fullWidth: 70,
                            fullHeight: 70,
                            aspectRatio: undefined
                          }
                    }
                  />
                }
              >
                {hasVariant($state, "isDiawasi", "isDiawasi")
                  ? "Riliv"
                  : "Ai Care"}
              </ItemListMitraThumbnail>
            ) : null}
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__zLtWb,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__zLtWbvK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ebq22)}
                    displayHeight={"72px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"72px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/sandbox_satuhsehat/images/aidoHealthpng.png",
                      fullWidth: 1038,
                      fullHeight: 102,
                      aspectRatio: undefined
                    }}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oZun8,
                    {
                      [sty.textisDiawasi__oZun8VK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "isDiawasi", "isDiawasi")
                    ? "Medic+"
                    : "Aido Health"}
                </div>
              </ItemListMitraThumbnail>
            ) : null}
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__lF4FY,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__lF4FYvK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qzUa, {
                      [sty.imgisDiawasi__qzUavK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("72px" as const)
                    }
                    loading={"lazy" as const}
                    src={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? {
                            src: "/plasmic/sandbox_satuhsehat/images/simasSehatpng.png",
                            fullWidth: 529,
                            fullHeight: 127,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/sandbox_satuhsehat/images/alodoctorjpeg.jpg",
                            fullWidth: 1080,
                            fullHeight: 1080,
                            aspectRatio: undefined
                          }
                    }
                  />
                }
              >
                {hasVariant($state, "isDiawasi", "isDiawasi")
                  ? "Klinik Simas Sehat"
                  : "Alodokter"}
              </ItemListMitraThumbnail>
            ) : null}
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__ulU4F,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__ulU4FvK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kCSoa, {
                      [sty.imgisDiawasi__kCSoavK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    loading={"lazy" as const}
                    src={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? {
                            src: "/plasmic/sandbox_satuhsehat/images/goodDoctorpng.png",
                            fullWidth: 1000,
                            fullHeight: 1000,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/sandbox_satuhsehat/images/menuIconspng.png",
                            fullWidth: 70,
                            fullHeight: 70,
                            aspectRatio: undefined
                          }
                    }
                  />
                }
              >
                {hasVariant($state, "isDiawasi", "isDiawasi")
                  ? "Good Doctor"
                  : "APPSKEP"}
              </ItemListMitraThumbnail>
            ) : null}
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__wyV2E,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__wyV2EvK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zwM9R, {
                      [sty.imgisDiawasi__zwM9RvK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    loading={"lazy" as const}
                    src={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? {
                            src: "/plasmic/sandbox_satuhsehat/images/naluripng.png",
                            fullWidth: 822,
                            fullHeight: 240,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/sandbox_satuhsehat/images/menuIconspng.png",
                            fullWidth: 70,
                            fullHeight: 70,
                            aspectRatio: undefined
                          }
                    }
                  />
                }
              >
                {hasVariant($state, "isDiawasi", "isDiawasi")
                  ? "Naluri"
                  : "Artiﬁcial intelegent, Patient and Engagement Platform"}
              </ItemListMitraThumbnail>
            ) : null}
            {(hasVariant($state, "isDiawasi", "isDiawasi") ? true : true) ? (
              <ItemListMitraThumbnail
                className={classNames(
                  "__wab_instance",
                  sty.itemListMitraThumbnail__cBe4,
                  {
                    [sty.itemListMitraThumbnailisDiawasi__cBe4VK8Cy]:
                      hasVariant($state, "isDiawasi", "isDiawasi")
                  }
                )}
                isTerdaftar={
                  hasVariant($state, "isDiawasi", "isDiawasi")
                    ? true
                    : undefined
                }
                slot={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__wAacQ, {
                      [sty.imgisDiawasi__wAacQvK8Cy]: hasVariant(
                        $state,
                        "isDiawasi",
                        "isDiawasi"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("100%" as const)
                        : ("100%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? ("72px" as const)
                        : ("auto" as const)
                    }
                    loading={"lazy" as const}
                    src={
                      hasVariant($state, "isDiawasi", "isDiawasi")
                        ? {
                            src: "/plasmic/sandbox_satuhsehat/images/myclnqsehatIndonesiapng.png",
                            fullWidth: 711,
                            fullHeight: 712,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/sandbox_satuhsehat/images/menuIconspng.png",
                            fullWidth: 70,
                            fullHeight: 70,
                            aspectRatio: undefined
                          }
                    }
                  />
                }
              >
                {hasVariant($state, "isDiawasi", "isDiawasi")
                  ? "myclnq sehat"
                  : "ATM Sehat"}
              </ItemListMitraThumbnail>
            ) : null}
          </Slider>
        }
      >
        {hasVariant($state, "isDiawasi", "isDiawasi")
          ? "Mitra Penyelenggara inovasi digital (IDK) Klaster telekesehataan yang diawasi oleh kementrian kesehatan RI"
          : "Mitra Penyelenggara inovasi digital (IDK) Klaster telekesehataan yang telah terdaftar"}
      </SliderMitra>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "buttonWrapper", "link", "sliderMitra", "slider"],
  freeBox: ["freeBox", "buttonWrapper", "link"],
  buttonWrapper: ["buttonWrapper"],
  link: ["link"],
  sliderMitra: ["sliderMitra", "slider"],
  slider: ["slider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  buttonWrapper: "div";
  link: "a";
  sliderMitra: typeof SliderMitra;
  slider: typeof Slider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideMitra__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideMitra__VariantsArgs;
    args?: PlasmicSlideMitra__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSlideMitra__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSlideMitra__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSlideMitra__ArgProps,
          internalVariantPropNames: PlasmicSlideMitra__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSlideMitra__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSlideMitra";
  } else {
    func.displayName = `PlasmicSlideMitra.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideMitra = Object.assign(
  // Top-level PlasmicSlideMitra renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    buttonWrapper: makeNodeComponent("buttonWrapper"),
    link: makeNodeComponent("link"),
    sliderMitra: makeNodeComponent("sliderMitra"),
    slider: makeNodeComponent("slider"),

    // Metadata about props expected for PlasmicSlideMitra
    internalVariantProps: PlasmicSlideMitra__VariantProps,
    internalArgProps: PlasmicSlideMitra__ArgProps
  }
);

export default PlasmicSlideMitra;
/* prettier-ignore-end */
